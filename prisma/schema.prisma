datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Sub-order for each merchant in a split order
model SubOrder {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String       @db.ObjectId
  merchantId   String       @db.ObjectId
  subtotal     Float
  commission   Float
  payoutAmount Float
  status       OrderStatus  @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  order    Order    @relation(fields: [orderId], references: [id])
  merchant Merchant @relation(fields: [merchantId], references: [id])
  items    OrderItem[]

  @@index([orderId])
  @@index([merchantId])
}

model Payment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String         @db.ObjectId
  gateway       PaymentGateway
  status        PaymentStatus
  amount        Float
  currency      String
  transactionId String?
  raw           Json?
  createdAt     DateTime       @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@index([gateway])
}

model PayoutBalance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  merchantId String   @unique @db.ObjectId
  available  Float    @default(0)
  pending    Float    @default(0)
  updatedAt  DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id])
}

model PayoutTransaction {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  merchantId  String       @db.ObjectId
  amount      Float
  status      PayoutStatus @default(PENDING)
  method      String
  externalRef String?
  createdAt   DateTime     @default(now())

  merchant Merchant @relation(fields: [merchantId], references: [id])

  @@index([merchantId])
  @@index([status])
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MERCHANT
  CUSTOMER
}

enum MerchantStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum PaymentGateway {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  name     String
  role     Role    @default(CUSTOMER)
  isDeleted Boolean @default(false)

  // Optional one-to-one Merchant profile for users who are merchants
  merchant Merchant?

  // Customer-related relations
  addresses        Address[]
  customerProfile  CustomerProfile?
  merchantCustomers MerchantCustomer[]
  ratings          Rating[]        @relation("CustomerRatings")
  // Orders placed by this user as a customer
  ordersAsCustomer Order[]        @relation("CustomerOrders")

  // Password reset tokens for this user
  passwordResetTokens PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Merchant {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @unique @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  storeName String
  status    MerchantStatus  @default(PENDING)
  products  Product[]
  orders    Order[]

  // Customers linked to this merchant
  merchantCustomers MerchantCustomer[]

  // Back-relations for split orders and payouts
  subOrders         SubOrder[]
  payoutBalance     PayoutBalance?
  payoutTransactions PayoutTransaction[]

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Product {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  slug       String     @unique
  title_en   String
  title_de   String
  desc_en    String
  desc_de    String
  price      Float
  stock      Int
  imageUrl   String?
  category   String     @default("Electronics")

  // Rating fields
  averageRating Float?   @default(0)
  ratingCount   Int      @default(0)

  merchantId String     @db.ObjectId
  merchant   Merchant   @relation(fields: [merchantId], references: [id])

  orderItems OrderItem[]
  ratings    Rating[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId

  quantity Int
  price    Float

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  // Split order linkage (one sub-order per merchant)
  subOrderId String?   @db.ObjectId
  subOrder   SubOrder? @relation(fields: [subOrderId], references: [id])

  @@index([subOrderId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String       @db.ObjectId
  merchantId      String       @db.ObjectId
  merchant        Merchant     @relation(fields: [merchantId], references: [id])
  customer        User         @relation("CustomerOrders", fields: [customerId], references: [id])
  status          OrderStatus  @default(PENDING)
  totalAmount     Float
  shippingAddress String
  // Optional normalized shipping address reference
  shippingAddressId String?    @db.ObjectId
  shippingAddressRef Address?  @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Aggregated payment info for checkout
  grandTotal Float
  currency   String      @default("USD")
  gatewayUsed   PaymentGateway?
  paymentStatus PaymentStatus?

  // Back-relations
  subOrders SubOrder[]
  payments  Payment[]

  @@index([customerId])
  @@index([merchantId])
  @@index([status])
}

// Normalized address records for users (customers)
model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  label       String?
  name        String?
  phone       String?
  line1       String
  line2       String?
  city        String
  state       String?
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  // Back-relations
  shippingOrders    Order[]            @relation("OrderShippingAddress")
  defaultForProfile CustomerProfile?   @relation("DefaultAddressProfile")

  @@index([userId])
}

// Extra per-customer profile metadata
model CustomerProfile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  phone            String?
  defaultAddressId String?  @unique @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id])
  defaultAddress   Address? @relation("DefaultAddressProfile", fields: [defaultAddressId], references: [id])
}

// Join model to represent a merchant's customers with per-merchant stats
model MerchantCustomer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  merchantId   String   @db.ObjectId
  customerId   String   @db.ObjectId
  tags         String[]
  notes        String?
  totalOrders  Int      @default(0)
  totalSpent   Float    @default(0)
  lastOrderAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  merchant     Merchant @relation(fields: [merchantId], references: [id])
  customer     User     @relation(fields: [customerId], references: [id])

  @@unique([merchantId, customerId])
  @@index([merchantId])
  @@index([customerId])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ContactMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      // 1-5 stars
  review    String?  // Optional review text
  productId String   @db.ObjectId
  customerId String  @db.ObjectId
  orderItemId String @db.ObjectId // Link to specific order item for verification
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer  User      @relation("CustomerRatings", fields: [customerId], references: [id])

  @@index([productId])
  @@index([customerId])
  @@index([orderItemId])
  @@unique([customerId, orderItemId]) // One rating per customer per order item
}
