// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type ApiRouteConfig = {
  default: (req: any, res: any) => Promise<void> | void | Promise<Response> | Response
  config?: {
    api?: {
      bodyParser?: boolean | { sizeLimit?: string }
      responseLimit?: string | number
      externalResolver?: boolean
    }
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    maxDuration?: number
  }
}


// Validate ..\..\src\app\[lang]\about\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\about\\page.js")
  handler satisfies AppPageConfig<"/[lang]/about">
}

// Validate ..\..\src\app\[lang]\admin\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\admin\\page.js")
  handler satisfies AppPageConfig<"/[lang]/admin">
}

// Validate ..\..\src\app\[lang]\cart\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\cart\\page.js")
  handler satisfies AppPageConfig<"/[lang]/cart">
}

// Validate ..\..\src\app\[lang]\categories\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\categories\\page.js")
  handler satisfies AppPageConfig<"/[lang]/categories">
}

// Validate ..\..\src\app\[lang]\checkout\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\checkout\\page.js")
  handler satisfies AppPageConfig<"/[lang]/checkout">
}

// Validate ..\..\src\app\[lang]\contact\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\contact\\page.js")
  handler satisfies AppPageConfig<"/[lang]/contact">
}

// Validate ..\..\src\app\[lang]\login\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\login\\page.js")
  handler satisfies AppPageConfig<"/[lang]/login">
}

// Validate ..\..\src\app\[lang]\merchant\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\merchant\\page.js")
  handler satisfies AppPageConfig<"/[lang]/merchant">
}

// Validate ..\..\src\app\[lang]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\page.js")
  handler satisfies AppPageConfig<"/[lang]">
}

// Validate ..\..\src\app\[lang]\product\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\product\\[id]\\page.js")
  handler satisfies AppPageConfig<"/[lang]/product/[id]">
}

// Validate ..\..\src\app\[lang]\products\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\products\\page.js")
  handler satisfies AppPageConfig<"/[lang]/products">
}

// Validate ..\..\src\app\[lang]\profile\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\profile\\page.js")
  handler satisfies AppPageConfig<"/[lang]/profile">
}

// Validate ..\..\src\app\[lang]\test\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\test\\page.js")
  handler satisfies AppPageConfig<"/[lang]/test">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}



// Validate ..\..\src\pages\contact.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\contact.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\login.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\login.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\api\auth\login.ts
{
  const handler = {} as typeof import("..\\..\\src\\pages\\api\\auth\\login.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\..\src\pages\api\auth\logout.ts
{
  const handler = {} as typeof import("..\\..\\src\\pages\\api\\auth\\logout.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\..\src\pages\api\contact.ts
{
  const handler = {} as typeof import("..\\..\\src\\pages\\api\\contact.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\..\src\pages\api\products\[id].ts
{
  const handler = {} as typeof import("..\\..\\src\\pages\\api\\products\\[id].js")
  handler satisfies ApiRouteConfig
}

// Validate ..\..\src\pages\api\products\index.ts
{
  const handler = {} as typeof import("..\\..\\src\\pages\\api\\products\\index.js")
  handler satisfies ApiRouteConfig
}

// Validate ..\..\src\app\[lang]\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\layout.js")
  handler satisfies LayoutConfig<"/[lang]">
}

// Validate ..\..\src\app\[lang]\merchant\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\[lang]\\merchant\\layout.js")
  handler satisfies LayoutConfig<"/[lang]/merchant">
}

// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
